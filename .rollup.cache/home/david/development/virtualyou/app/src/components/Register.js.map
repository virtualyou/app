{"version":3,"file":"Register.js","sourceRoot":"","sources":["Register.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * VirtualYou\n * @license Apache-2.0\n * @author David L Whitehurst\n */\n\nimport {Component} from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport HcaptchaComponent from \"./HcaptchaComponent.tsx\";\n\nimport AuthService from \"../services/auth.service\";\n\ninterface Props {\n    // Define the props that your component expects\n}\n\ntype State = {\n    username: string,\n    email: string,\n    password: string,\n    successful: boolean,\n    message: string\n};\n\nexport default class Register extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.handleRegister = this.handleRegister.bind(this);\n\n        this.state = {\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            successful: false,\n            message: \"\",\n        };\n    }\n\n\n    private siteKey = import.meta.env.VITE_SITE_KEY;\n\n    validationSchema() {\n        return Yup.object().shape({\n            username: Yup.string()\n                .test(\n                    \"len\",\n                    \"The username must be between 3 and 20 characters.\",\n                    (val: any) =>\n                        val &&\n                        val.toString().length >= 3 &&\n                        val.toString().length <= 20\n                )\n                .required(\"This field is required!\"),\n            email: Yup.string()\n                .email(\"This is not a valid email.\")\n                .required(\"This field is required!\"),\n            password: Yup.string()\n                .test(\n                    \"len\",\n                    \"The password must be between 6 and 40 characters.\",\n                    (val: any) =>\n                        val &&\n                        val.toString().length >= 6 &&\n                        val.toString().length <= 40\n                )\n                .required(\"This field is required!\"),\n        });\n    }\n\n    handleRegister(formValue: { username: string; email: string; password: string }) {\n        const { username, email, password } = formValue;\n\n        this.setState({\n            message: \"\",\n            successful: false\n        });\n\n        AuthService.register(\n            username,\n            email,\n            password\n        ).then(\n            response => {\n                this.setState({\n                    message: response.data.message,\n                    successful: true\n                });\n            },\n            error => {\n                const resMessage =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                this.setState({\n                    successful: false,\n                    message: resMessage\n                });\n            }\n        );\n    }\n\n    render() {\n        const { successful, message } = this.state;\n\n        const initialValues = {\n            username: \"\",\n            email: \"\",\n            password: \"\",\n        };\n\n        return (\n            <div className=\"col-md-12\">\n                <div className=\"card card-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={this.validationSchema}\n                        onSubmit={this.handleRegister}\n                    >\n                        <Form>\n                            {!successful && (\n                                <div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"username\"> Username </label>\n                                        <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage\n                                            name=\"username\"\n                                            component=\"div\"\n                                            className=\"alert alert-danger\"\n                                        />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\"> Email </label>\n                                        <Field name=\"email\" type=\"email\" className=\"form-control\" />\n                                        <ErrorMessage\n                                            name=\"email\"\n                                            component=\"div\"\n                                            className=\"alert alert-danger\"\n                                        />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"password\"> Password </label>\n                                        <Field\n                                            name=\"password\"\n                                            type=\"password\"\n                                            className=\"form-control\"\n                                        />\n                                        <ErrorMessage\n                                            name=\"password\"\n                                            component=\"div\"\n                                            className=\"alert alert-danger\"\n                                        />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n                                    </div>\n                                    <div>\n                                        {/* Your page content */}\n                                        <HcaptchaComponent sitekey={this.siteKey} />\n                                    </div>\n                                </div>\n                            )}\n\n                            {message && (\n                                <div className=\"form-group\">\n                                    <div\n                                        className={\n                                            successful ? \"alert alert-success\" : \"alert alert-danger\"\n                                        }\n                                        role=\"alert\"\n                                    >\n                                        {message}\n                                    </div>\n                                </div>\n                            )}\n                        </Form>\n                    </Formik>\n                </div>\n            </div>\n        );\n    }\n}"]}