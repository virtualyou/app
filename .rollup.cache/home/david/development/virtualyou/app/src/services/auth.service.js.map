{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["auth.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,UAAU,MAAM,eAAe,CAAC;AAEvC,MAAM,QAAQ,GAAG,yCAAyC,CAAC;AAC3D,MAAM,WAAW;IAEb;;;;;;;;OAQG;IACH,KAAK,CAAC,QAAgB,EAAE,QAAgB;QACpC,OAAO,KAAK;aACP,IAAI,CAAC,QAAQ,GAAG,QAAQ,EAAE;YACvB,QAAQ;YACR,QAAQ;SACX,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC;aAC5B,IAAI,CAAC,QAAQ,CAAC,EAAE;YACb,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAChB,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;oBAC9B,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACtD,CAAC;qBAAM,CAAC;oBACJ,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3D,CAAC;gBACD,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAChE,CAAC;YAED,OAAO,QAAQ,CAAC,IAAI,CAAC;QACzB,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;;;;;OAMG;IACH,MAAM;QACF,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;;;;OAUG;IACH,QAAQ,CAAC,QAAgB,EAAE,KAAa,EAAE,QAAgB;QACtD,MAAM,OAAO,GAAG,CAAC,CAAC;QAClB,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,EAAE;YACnC,QAAQ;YACR,KAAK;YACL,QAAQ;YACR,OAAO;SACV,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,cAAc,CAAC,QAAgB,EAAE,KAAa,EAAE,QAAgB,EAAE,OAAe,EAAE,IAAY;QAC3F,+GAA+G;QAC3G,MAAM,KAAK,GAAa,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,EAAE;YACnC,QAAQ;YACR,KAAK;YACL,QAAQ;YACR,OAAO;YACP,KAAK;SACR,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACH,cAAc;QACV,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,OAAO;YAAE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAED,eAAe,IAAI,WAAW,EAAE,CAAC","sourcesContent":["/**\n * VirtualYou\n * @license Apache-2.0\n * @author David L Whitehurst\n */\n\nimport axios from \"axios\";\nimport authHeader from './auth-header';\n\nconst AUTH_URL = \"http://localhost:3000/userauth/v1/auth/\";\nclass AuthService {\n\n    /**\n     * This is a method to login a system user\n     *\n     * @param username - String username\n     * @param password - String password\n     * @remarks\n     * using Axios calling userauth API\n     * @returns Promise.\n     */\n    login(username: string, password: string) {\n        return axios\n            .post(AUTH_URL + \"signin\", {\n                username,\n                password\n            }, { headers: authHeader() })\n            .then(response => {\n                if (response.data) {\n                    if (response.data.ownerId === 0) {\n                        localStorage.setItem(\"ownerid\", response.data.id);\n                    } else {\n                        localStorage.setItem(\"ownerid\", response.data.ownerId);\n                    }\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\n                }\n\n                return response.data;\n            });\n    }\n\n    /**\n     * This is a method to logout a system user\n     *\n     * @remarks\n     * TODO: remove cookie with actual signout call?\n     * @returns Promise.\n     */\n    logout() {\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"ownerid\");\n    }\n\n    /**\n     * This is a method to register a system user, and\n     * specifically a ROLE_OWNER\n     *\n     * @param username - String username\n     * @param email - String email\n     * @param password - String password\n     * @remarks\n     * using Axios calling userauth API\n     * @returns Promise.\n     */\n    register(username: string, email: string, password: string) {\n        const ownerId = 0;\n        return axios.post(AUTH_URL + \"signup\", {\n            username,\n            email,\n            password,\n            ownerId\n        }, { headers: authHeader() });\n    }\n\n    /**\n     * This is a method to register a system user, and\n     * specifically a ROLE_AGENT or ROLE_MONITOR, note\n     * the role required\n     *\n     * @param username - String username\n     * @param email - String email\n     * @param password - String password\n     * @param role - String role (strict set of names e.g. owner, agent, monitor, admin)\n     * @remarks\n     * using Axios calling userauth API\n     * @returns Promise.\n     */\n    registerHelper(username: string, email: string, password: string, ownerId: number, role: string) {\n        // must generate deterministic key from owner mnemonic and verify against the registrant's query parameter dkey\n            const roles: string[] = [role];\n            return axios.post(AUTH_URL + \"signup\", {\n                username,\n                email,\n                password,\n                ownerId,\n                roles\n            }, { headers: authHeader() });\n    }\n\n    /**\n     * This is a simple method to return the current username.\n     * @remarks\n     * using localStorage to obtain\n     * @returns string.\n     */\n    getCurrentUser() {\n        const userStr = localStorage.getItem(\"user\");\n        if (userStr) return JSON.parse(userStr);\n        return null;\n    }\n}\n\nexport default new AuthService();"]}