{"version":3,"file":"administration.service.js","sourceRoot":"","sources":["administration.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,MAAM,SAAS,GAAG,gDAAgD,CAAC;AAEnE;;;;;;;;;;;;GAYG;AACH,MAAM,qBAAqB;IAEvB;;;;;;OAMG;IACH,QAAQ;QACJ,OAAO,KAAK,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;;OAOG;IACH,OAAO,CAAC,EAAU;QACd,OAAO,KAAK,CAAC,GAAG,CAAC,SAAS,GAAG,QAAQ,GAAG,EAAE,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;;OAOG;IACH,UAAU,CAAC,EAAU;QACjB,OAAO,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,QAAQ,GAAG,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;;OAQG;IACH,UAAU,CAAC,EAAU,EAAE,GAAS;QAC5B,OAAO,KAAK,CAAC,GAAG,CAAC,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;;OAOG;IACH,UAAU,CAAC,GAAe;QACtB,OAAO,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;IAChD,CAAC;CAEJ;AAED,eAAe,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["/**\n * VirtualYou\n * @license Apache-2.0\n * @author David L Whitehurst\n */\n\nimport axios from \"axios\";\nimport Task from \"../types/task.type.ts\";\nimport CreateTask from \"../types/createtask.type.ts\";\n\nconst ADMIN_URL = \"http://localhost:3000/administration/v1/owner/\";\n\n/**\n * Class: AdministrationService\n *\n * @remarks\n * This is an admin service class that communicates with the administration API for its\n * operations using Axios.\n *\n * @example\n * ```\n * const adminService = new AdministrationService();\n * const myPromise = adminService.getTasks();\n * ```\n */\nclass AdministrationService {\n\n    /**\n     * This is a method to get all tasks (for a configured owner)\n     *\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    getTasks() {\n        return axios.get(ADMIN_URL + 'tasks');\n    }\n\n    /**\n     * This is a method to get a task by id (for a configured owner)\n     *\n     * @param id - the primary key for task needed.\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    getTask(id: number) {\n        return axios.get(ADMIN_URL + 'tasks/' + id);\n    }\n\n    /**\n     * This is a method to delete a task by id (for a configured owner)\n     *\n     * @param id - the primary key for task needed.\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    deleteTask(id: number) {\n        return axios.delete(ADMIN_URL + 'tasks/' + id);\n    }\n\n    /**\n     * This is a method to update a task by id (for a configured owner)\n     *\n     * @param id - the primary key for task needed.\n     * @param obj - Debt type\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    updateTask(id: number, obj: Task) {\n        return axios.put(ADMIN_URL + 'tasks/' + id, obj);\n    }\n\n    /**\n     * This is a method to create a new task (for a configured owner)\n     *\n     * @param obj - Task type\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    createTask(obj: CreateTask) {\n        return axios.post(ADMIN_URL + 'tasks', obj);\n    }\n\n}\n\nexport default new AdministrationService();\n"]}