{"version":3,"file":"medical.service.js","sourceRoot":"","sources":["medical.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,MAAM,OAAO,GAAG,yCAAyC,CAAC;AAE1D;;;;;;;;;;;;GAYG;AACH,MAAM,cAAc;IAEhB;;;;;;OAMG;IACH,gBAAgB;QACZ,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,eAAe,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;;OAOG;IACH,eAAe,CAAC,EAAU;QACtB,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,gBAAgB,GAAG,EAAE,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;OAOG;IACH,kBAAkB,CAAC,EAAU;QACzB,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,gBAAgB,GAAG,EAAE,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;OAQG;IACH,kBAAkB,CAAC,EAAU,EAAE,GAAiB;QAC5C,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,gBAAgB,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;;;OAOG;IACH,kBAAkB,CAAC,GAAuB;QACtC,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,eAAe,EAAE,GAAG,CAAC,CAAC;IACtD,CAAC;CAEJ;AAED,eAAe,IAAI,cAAc,EAAE,CAAC","sourcesContent":["/**\n * VirtualYou\n * @license Apache-2.0\n * @author David L Whitehurst\n */\n\nimport axios from \"axios\";\nimport Prescription from \"../types/prescription.type.ts\";\nimport CreatePrescription from \"../types/createprescription.type.ts\";\n\nconst MED_URL = \"http://localhost:3000/medical/v1/owner/\";\n\n/**\n * Class: MedicalService\n *\n * @remarks\n * This is a medical service class that communicates with the medical API for its\n * operations using Axios.\n *\n * @example\n * ```\n * const medService = new MedicalService();\n * const myPromise = medService.getPrescriptions();\n * ```\n */\nclass MedicalService {\n\n    /**\n     * This is a method to get all prescriptions (for a configured owner)\n     *\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    getPrescriptions() {\n        return axios.get(MED_URL + 'prescriptions');\n    }\n\n    /**\n     * This is a method to get a prescription by id (for a configured owner)\n     *\n     * @param id - the primary key for prescription needed.\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    getPrescription(id: number) {\n        return axios.get(MED_URL + 'prescriptions/' + id);\n    }\n\n    /**\n     * This is a method to delete a prescription by id (for a configured owner)\n     *\n     * @param id - the primary key for prescription needed.\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    deletePrescription(id: number) {\n        return axios.delete(MED_URL + 'prescriptions/' + id);\n    }\n\n    /**\n     * This is a method to update a prescription by id (for a configured owner)\n     *\n     * @param id - the primary key for prescription needed.\n     * @param obj - Prescription type\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    updatePrescription(id: number, obj: Prescription) {\n        return axios.put(MED_URL + 'prescriptions/' + id, obj);\n    }\n\n    /**\n     * This is a method to create a new prescription (for a configured owner)\n     *\n     * @param obj - Prescription type\n     * @remarks\n     * using Axios\n     * @returns Promise.\n     */\n    createPrescription(obj: CreatePrescription) {\n        return axios.post(MED_URL + 'prescriptions', obj);\n    }\n\n}\n\nexport default new MedicalService();"]}