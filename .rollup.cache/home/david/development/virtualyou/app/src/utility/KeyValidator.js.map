{"version":3,"file":"KeyValidator.js","sourceRoot":"","sources":["KeyValidator.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,OAAO,WAAW,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,EAAU,EAAE,GAAW;IAC3D,OAAO,MAAM,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;SAChC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QACb,MAAM,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACpC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;QACxC,OAAO,WAAW,KAAK,GAAG,CAAC;IAC/B,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;AACX,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,EAAU,EAAE,GAAW;IAC7D,OAAO,MAAM,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;SAChC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QACb,MAAM,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACpC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACvC,MAAM,WAAW,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;QACxC,OAAO,WAAW,KAAK,GAAG,CAAC;IAC/B,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;AACX,CAAC","sourcesContent":["/**\n * VirtualYou\n * @license Apache-2.0\n * @author David L Whitehurst\n */\nimport UserService from \"../services/user.service.ts\";\nimport forge from \"node-forge\";\n\n/**\n * This asynchronous function compares an owner's agent key with\n * a query parameter key in an Agent invite.\n *\n * @param {number} id - The owner's user id.\n * @param {string} key - The key as the query parameter.\n * @returns {Promise<boolean>} - The keys match?\n */\nexport async function keysMatchForAgent(id: number, key: string): Promise<boolean> {\n    return await UserService.getOwner(id)\n        .then((result) => {\n            const md = forge.md.sha256.create();\n            md.update(result.data.agentMnemonic);\n            const originalKey = md.digest().toHex();\n            return originalKey === key;\n        })\n        .catch((error) => {\n            console.error(error);\n            return false;\n        });\n}\n\n/**\n * This asynchronous function compares an owner's monitor key with\n * a query parameter key in a Monitor invite.\n *\n * @param {number} id - The owner's user id.\n * @param {string} key - The key as the query parameter.\n * @returns {Promise<boolean>} - The keys match?\n */\nexport async function keysMatchForMonitor(id: number, key: string): Promise<boolean> {\n    return await UserService.getOwner(id)\n        .then((result) => {\n            const md = forge.md.sha256.create();\n            md.update(result.data.monitorMnemonic);\n            const originalKey = md.digest().toHex();\n            return originalKey === key;\n        })\n        .catch((error) => {\n            console.error(error);\n            return false;\n        });\n}\n\n\n"]}